{"version":3,"sources":["components/Title.tsx","components/BoardButton.tsx","components/Bottom.tsx","components/Board.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","props","className","title","classNames","BoardButton","keyPos","split","map","item","parseInt","row","col","finalClassName","winningTracked","tracked","who","id","disabled","clicked","winnerExists","Bottom","info","onClick","onClickUndo","onClickReset","Board","useState","tiles","Array","from","length","curPlayer","history","winner","winningTracks","status","setStatus","stopSFX","wav","pause","currentTime","playSFX","player1PutSFX","player2PutSFX","undoSFX","resetSFX","resultSFX","play","isInRange","HEIGHT","WIDTH","getNewTiles","player","newTiles","_","i","getNewPlayer","checkWinner","directions","n","rDir","cDir","collected","curRow","curCol","push","winningTrack","Set","event","target","Number","isNaN","newPlayer","newHistory","putStone","line","j","has","tmp","pop","undefined","Main","SFXs","document","querySelector","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMAceA,MARf,SAAeC,GACb,OACE,qBAAKC,UAAU,QAAf,SACID,EAAME,S,OCCRC,EAAyB,CAC7B,CAAC,gBAAiB,UAAW,kBAC7B,CAAC,WAAY,UAAW,aACxB,CAAC,mBAAoB,aAAc,sBAuBtBC,MApBf,SAAqBJ,GACnB,MAAmBA,EAAMK,OAAOC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAUC,SAASD,MAAlE,mBAAOE,EAAP,KAAYC,EAAZ,KAGMC,EAAiBT,EAFD,IAARO,EAAa,EAAc,KAARA,EAAc,EAAI,GAC7B,IAARC,EAAa,EAAc,KAARA,EAAc,EAAI,GAG7CE,EAAiBb,EAAMc,QAAU,gBAAkB,GAEzD,OACE,wBACEb,UAAS,4BAAuBD,EAAMe,IAA7B,YAAoCH,EAApC,YAAsDC,GAE/DG,GAAIhB,EAAMK,OACVY,SAAUjB,EAAMkB,SAAWlB,EAAMmB,aAJnC,SAMkB,IAAdnB,EAAMe,IAA2B,IAAdf,EAAMe,IAAY,SAAM,SAAO,gBAJ/Cf,EAAMK,SCDFe,MAlBf,SAAgBpB,GACd,OACE,sBAAKC,UAAU,SAAf,UAEKD,EAAMqB,MAAuB,KAAfrB,EAAMqB,KACrB,oCAAQrB,EAAMqB,KAAd,OACA,GAEF,wBAAQC,QAAS,WAAOtB,EAAMuB,eAA9B,kBAGA,wBAAQD,QAAS,WAAOtB,EAAMwB,gBAA9B,uBCwMSC,MAxMf,SAAezB,GAEb,MAA4B0B,mBAAS,CACnCC,MAAOC,MAAMC,KAAK,CAACC,OARA,KAQiB,kBAAMF,MAAMC,KAAK,CAACC,OATpC,KASoD,kBAAM,QAC5EC,UAAW,EACXC,QAASJ,QACTK,OAAQ,EACRC,cAAeN,UALjB,mBAAOO,EAAP,KAAeC,EAAf,KAQMC,EAAU,SAACC,GACXA,IACFA,EAAIC,QACJD,EAAIE,YAAc,IAYhBC,EAAU,SAACH,GAPfD,EAAQrC,EAAM0C,eACdL,EAAQrC,EAAM2C,eACdN,EAAQrC,EAAM4C,SACdP,EAAQrC,EAAM6C,UACdR,EAAQrC,EAAM8C,WAKVR,GACFA,EAAIS,QAIFC,EAAY,SAACtC,EAAaC,GAC9B,QAAID,EAAM,GAAKA,EAnCUuC,IAmCYtC,EAAM,GAAKA,EApCvBuC,KA0CrBC,EAAc,SAACzC,EAAaC,EAAayC,GAC7C,IAAMC,EAAWzB,MAAMC,KAAK,CAACC,OA7CV,KA6C2B,SAACwB,EAAGC,GAAJ,OAAU3B,MAAMC,KAAKM,EAAOR,MAAM4B,OAEhF,OADAF,EAAS3C,GAAKC,GAAOyC,EACdC,GAGHG,EAAe,SAACzB,GACpB,OAAQA,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,QACE,OAAO,IAkFP0B,EAAc,SAAC/C,EAAaC,EAAa0C,GAI7C,IAHA,IAAMpB,EAAiBoB,EAAS3C,GAAKC,GAE/B+C,EAAyB,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,IACpDC,EAAY,EAAGA,EAAID,EAAW5B,OAAQ6B,IAAK,CAKlD,IAJA,kBAAqBD,EAAWC,GAAhC,GAAOC,EAAP,KAAaC,EAAb,KACMC,EAAwB,CAAC,CAACpD,EAAKC,IAEhCoD,EAAmBrD,EAAMkD,EAAjBI,EAAuBrD,EAAMkD,EACnCb,EAAUe,EAAQC,IAAWX,EAASU,GAAQC,KAAY/B,GAC/D6B,EAAUG,KAAK,CAACF,EAAQC,IACxBD,GAAUH,EACVI,GAAUH,EAIZ,IADCE,EAAmBrD,EAAMkD,EAAjBI,EAAuBrD,EAAMkD,EAC/Bb,EAAUe,EAAQC,IAAWX,EAASU,GAAQC,KAAY/B,GAC/D6B,EAAUG,KAAK,CAACF,EAAQC,IACxBD,GAAUH,EACVI,GAAUH,EAGZ,GAhKoB,IAgKhBC,EAAUhC,OACZ,MAAO,CAACG,EAAQ6B,GAIpB,MAAO,CAAC,EAAG,KAGPI,EAA4B,IAAIC,IAAIhC,EAAOD,cAAc3B,KAAI,SAACC,GAAD,gBAAaA,EAAK,GAAlB,YAAwBA,EAAK,QAEhG,OACE,sBAAKP,UAAU,QAAQqB,QAAS,SAAC8C,GAC/B,MAAoBA,EAAMC,OAAuBrD,GAAGV,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAUC,SAASD,MAAtF,mBAAOE,EAAP,KAAYC,EAAZ,KACI2D,OAAOC,MAAM7D,IAAQ4D,OAAOC,MAAM5D,IAjHzB,SAACD,EAAaC,GAC7B,GAA+B,IAA3BwB,EAAOR,MAAMjB,GAAKC,GAAtB,CAIA,IAAM0C,EAAuBF,EAAYzC,EAAKC,EAAKwB,EAAOJ,WACpDyC,EAAoBhB,EAAarB,EAAOJ,WAE9C,EAAgC0B,EAAY/C,EAAKC,EAAK0C,GAAtD,mBAAOpB,EAAP,KAAeC,EAAf,KAEMuC,EAAa7C,MAAMC,KAAKM,EAAOH,SAGrC,GAFAyC,EAAWR,KAAK,CAACvD,EAAKC,IAEP,IAAXsB,EACFQ,EAAQzC,EAAM8C,gBAEd,OAAQX,EAAOJ,WACb,KAAK,EACHU,EAAQzC,EAAM0C,eACd,MACF,KAAK,EACHD,EAAQzC,EAAM2C,eAKpBP,EAAU,CACRT,MAAO0B,EACPtB,UAAWyC,EACXxC,QAASyC,EACTxC,OAAQA,EACRC,cAAeA,KAsFfwC,CAAShE,EAAKC,IANhB,UAQE,qBAAKV,UAAU,QAAf,SAEIkC,EAAOR,MAAMpB,KAAI,SAACoE,EAAMpB,GACtB,OAAOoB,EAAKpE,KAAI,SAACC,EAAMoE,GACrB,OAAQ,cAAC,EAAD,CAENvE,OAAM,UAAKkD,EAAL,YAAUqB,GAChB7D,IAAKP,EACLU,QAAkB,IAATV,EACTW,aAAgC,IAAlBgB,EAAOF,OACrBnB,QAA2B,IAAlBqB,EAAOF,QAAgBiC,EAAaW,IAAb,UAAoBtB,EAApB,YAAyBqB,KANnD,WACGrB,EADH,YACQqB,YAWxB,cAAC,EAAD,CACEvD,KAAwB,IAAlBc,EAAOF,OAAP,iBAAgCE,EAAOF,OAAvC,2BAAkEE,EAAOJ,UAAzE,YACNR,YAtGO,WACX,GAA8B,IAA1BY,EAAOH,QAAQF,OAAnB,CAIAW,EAAQzC,EAAM4C,SAEd,IAAM6B,EAAa7C,MAAMC,KAAKM,EAAOH,SAC/B8C,EAA4BL,EAAWM,MAE7C,QAAYC,IAARF,EAAJ,CAIA,kBAAmBA,EAAnB,GAAOpE,EAAP,KAAYC,EAAZ,KACA,GAAKqC,EAAUtC,EAAKC,GAApB,CAIA,IAAM0C,EAAuBF,EAAYzC,EAAKC,EArH5B,GAsHZ6D,EAAoBhB,EAAarB,EAAOJ,WAE9CK,EAAU,CACRT,MAAO0B,EACPtB,UAAWyC,EACXxC,QAASyC,EACTxC,OAAQ,EACRC,cAAeN,cA4EbJ,aAxEa,WACjBiB,EAAQzC,EAAM6C,UAEdT,EAAU,CACRT,MAAOC,MAAMC,KAAK,CAACC,OAnIF,KAmImB,kBAAMF,MAAMC,KAAK,CAACC,OApItC,KAoIsD,kBAAM,QAC5EC,UAAW,EACXC,QAASJ,QACTK,OAAQ,EACRC,cAAeN,iBC1HNqD,MAvBf,WACE,IAAMC,EAAO,CACXxC,cAAeyC,SAASC,cAAc,kBACtCzC,cAAewC,SAASC,cAAc,kBACtCvC,SAAUsC,SAASC,cAAc,aACjCxC,QAASuC,SAASC,cAAc,YAChCtC,UAAWqC,SAASC,cAAc,eAGpC,OACE,uBAAMnF,UAAU,OAAhB,UACE,cAAC,EAAD,CAAOC,MAAM,iBACb,cAAC,EAAD,CACEwC,cAAewC,EAAKxC,cACpBC,cAAeuC,EAAKvC,cACpBE,SAAUqC,EAAKrC,SACfD,QAASsC,EAAKtC,QACdE,UAAWoC,EAAKpC,gBCTTuC,MARf,WACE,OACE,qBAAKpF,UAAU,MAAf,SACE,cAAC,EAAD,OCOSqF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,K","file":"static/js/main.e213d2cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface TitleProps {\r\n  title: string\r\n}\r\n\r\nfunction Title(props: TitleProps) {\r\n  return (\r\n    <div className=\"Title\">\r\n      { props.title }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\ninterface BoardButtonProps {\r\n  keyPos: string,\r\n  who: number,\r\n  clicked: boolean,\r\n  winnerExists: boolean,\r\n  tracked: boolean\r\n}\r\n\r\nconst classNames: string[][] = [\r\n  ['LeftTopCorner', 'TopEdge', 'RightTopCorner'],\r\n  ['LeftEdge', 'InBoard', 'RightEdge'],\r\n  ['LeftBottomCorner', 'BottomEdge', 'RightBottomCorner']\r\n];\r\n\r\nfunction BoardButton(props: BoardButtonProps) {\r\n  const [row, col] = props.keyPos.split(',').map((item) => parseInt(item));\r\n  const rPos = (row === 0) ? 0 : ((row === 18) ? 2 : 1);\r\n  const cPos = (col === 0) ? 0 : ((col === 18) ? 2 : 1);\r\n  const finalClassName = classNames[rPos][cPos];\r\n\r\n  const winningTracked = props.tracked ? 'TrackedResult' : '';\r\n\r\n  return (\r\n    <button\r\n      className={`BoardButton Player${props.who} ${finalClassName} ${winningTracked}`}\r\n      key={props.keyPos}\r\n      id={props.keyPos}\r\n      disabled={props.clicked || props.winnerExists}\r\n    >\r\n      { props.who !== 0 ? (props.who === 1 ? 'âš«' : 'âšª') : 'ðŸ”´' }\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default BoardButton;\r\n","import React from 'react';\r\n\r\ninterface BottomProps {\r\n  info?: string,\r\n  onClickUndo: Function,\r\n  onClickReset: Function\r\n}\r\n\r\nfunction Bottom(props: BottomProps) {\r\n  return (\r\n    <div className=\"Bottom\">\r\n      {\r\n        (props.info && props.info !== '') ?\r\n        <div> { props.info } </div> :\r\n        ''\r\n      }\r\n      <button onClick={() => {props.onClickUndo()}}>\r\n        Undo\r\n      </button>\r\n      <button onClick={() => {props.onClickReset()}}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bottom;\r\n","import React, { useState } from 'react';\r\nimport BoardButton from './BoardButton';\r\nimport Bottom from './Bottom';\r\n\r\ninterface BoardProps {\r\n  player1PutSFX: HTMLAudioElement,\r\n  player2PutSFX: HTMLAudioElement,\r\n  undoSFX: HTMLAudioElement,\r\n  resetSFX: HTMLAudioElement,\r\n  resultSFX: HTMLAudioElement\r\n}\r\n\r\nconst EMPTY: number = 0;\r\nconst WIDTH: number = 19;\r\nconst HEIGHT: number = 19;\r\nconst OBJECTIVE: number = 5;\r\nconst COL_BOUNDARY: number = WIDTH - 1;\r\nconst ROW_BOUNDARY: number = HEIGHT - 1;\r\n\r\nfunction Board(props: BoardProps) {\r\n  // Using React hooks\r\n  const [status, setStatus] = useState({\r\n    tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\r\n    curPlayer: 1,\r\n    history: Array<number[]>(),\r\n    winner: 0,\r\n    winningTracks: Array<number[]>()\r\n  });\r\n\r\n  const stopSFX = (wav: HTMLAudioElement) => {\r\n    if (wav) {\r\n      wav.pause();\r\n      wav.currentTime = 0;\r\n    }\r\n  };\r\n\r\n  const initSFX = () => {\r\n    stopSFX(props.player1PutSFX);\r\n    stopSFX(props.player2PutSFX);\r\n    stopSFX(props.undoSFX);\r\n    stopSFX(props.resetSFX);\r\n    stopSFX(props.resultSFX);\r\n  };\r\n\r\n  const playSFX = (wav: HTMLAudioElement) => {\r\n    initSFX();\r\n    if (wav) {\r\n      wav.play();\r\n    }\r\n  };\r\n\r\n  const isInRange = (row: number, col: number): boolean => {\r\n    if (row < 0 || row > ROW_BOUNDARY || col < 0 || col > COL_BOUNDARY) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const getNewTiles = (row: number, col: number, player: number): number[][] => {\r\n    const newTiles = Array.from({length: HEIGHT}, (_, i) => Array.from(status.tiles[i]));\r\n    newTiles[row][col] = player;\r\n    return newTiles;\r\n  };\r\n\r\n  const getNewPlayer = (curPlayer: number): number => {\r\n    switch (curPlayer) {\r\n      case 1:\r\n        return 2;\r\n      case 2:\r\n        return 1;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  const putStone = (row: number, col: number) => {\r\n    if (status.tiles[row][col] !== 0) {\r\n      return;\r\n    }\r\n\r\n    const newTiles: number[][] = getNewTiles(row, col, status.curPlayer);\r\n    const newPlayer: number = getNewPlayer(status.curPlayer);\r\n\r\n    const [winner, winningTracks] = checkWinner(row, col, newTiles);\r\n\r\n    const newHistory = Array.from(status.history);\r\n    newHistory.push([row, col]);\r\n\r\n    if (winner !== 0) {\r\n      playSFX(props.resultSFX);\r\n    } else {\r\n      switch (status.curPlayer) {\r\n        case 1:\r\n          playSFX(props.player1PutSFX);\r\n          break;\r\n        case 2:\r\n          playSFX(props.player2PutSFX);\r\n          break;\r\n      }\r\n    }\r\n\r\n    setStatus({\r\n      tiles: newTiles,\r\n      curPlayer: newPlayer,\r\n      history: newHistory,\r\n      winner: winner,\r\n      winningTracks: winningTracks\r\n    });\r\n  };\r\n\r\n  const undo = () => {\r\n    if (status.history.length === 0) {\r\n      return;\r\n    }\r\n\r\n    playSFX(props.undoSFX);\r\n\r\n    const newHistory = Array.from(status.history);\r\n    const tmp: number[] | undefined = newHistory.pop();\r\n\r\n    if (tmp === undefined) {\r\n      return;\r\n    }\r\n\r\n    const [row, col] = tmp;\r\n    if (!isInRange(row, col)) {\r\n      return;\r\n    }\r\n\r\n    const newTiles: number[][] = getNewTiles(row, col, EMPTY);\r\n    const newPlayer: number = getNewPlayer(status.curPlayer);\r\n\r\n    setStatus({\r\n      tiles: newTiles,\r\n      curPlayer: newPlayer,\r\n      history: newHistory,\r\n      winner: 0,\r\n      winningTracks: Array<number[]>()\r\n    });\r\n  };\r\n\r\n  const resetBoard = () => {\r\n    playSFX(props.resetSFX);\r\n\r\n    setStatus({\r\n      tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\r\n      curPlayer: 1,\r\n      history: Array<number[]>(),\r\n      winner: 0,\r\n      winningTracks: Array<number[]>()\r\n    });\r\n  };\r\n\r\n  const checkWinner = (row: number, col: number, newTiles: number[][]): [number, number[][]] => {\r\n    const winner: number = newTiles[row][col];\r\n\r\n    const directions: number[][] = [[1, 0], [0, 1], [1, 1], [1, -1]];\r\n    for (let n: number = 0; n < directions.length; n++) {\r\n      const [rDir, cDir] = directions[n];\r\n      const collected: number[][] = [[row, col]];\r\n\r\n      let [curRow, curCol] = [row + rDir, col + cDir];\r\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\r\n        collected.push([curRow, curCol]);\r\n        curRow += rDir;\r\n        curCol += cDir;\r\n      }\r\n\r\n      [curRow, curCol] = [row - rDir, col - cDir];\r\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\r\n        collected.push([curRow, curCol]);\r\n        curRow -= rDir;\r\n        curCol -= cDir;\r\n      }\r\n\r\n      if (collected.length === OBJECTIVE) {\r\n        return [winner, collected];\r\n      }\r\n    }\r\n\r\n    return [0, []];\r\n  };\r\n\r\n  const winningTrack: Set<string> = new Set(status.winningTracks.map((item) => `${item[0]},${item[1]}`));\r\n\r\n  return (\r\n    <div className=\"Board\" onClick={(event) => {\r\n      const [row, col] = (event.target as HTMLElement).id.split(',').map((item) => parseInt(item));\r\n      if (Number.isNaN(row) || Number.isNaN(col)) {\r\n        return;\r\n      }\r\n\r\n      putStone(row, col);\r\n    }}>\r\n      <div className=\"Tiles\">\r\n        {\r\n          status.tiles.map((line, i) => {\r\n            return line.map((item, j) => {\r\n              return (<BoardButton\r\n                key={`r${i}c${j}`}\r\n                keyPos={`${i},${j}`}\r\n                who={item}\r\n                clicked={item !== 0}\r\n                winnerExists={status.winner !== 0}\r\n                tracked={status.winner !== 0 ? (winningTrack.has(`${i},${j}`)) : false}\r\n              />);\r\n            });\r\n          })\r\n        }\r\n      </div>\r\n      <Bottom\r\n        info={status.winner !== 0 ? `Player ${status.winner} wins!` : `Player ${status.curPlayer}'s turn!`}\r\n        onClickUndo={undo}\r\n        onClickReset={resetBoard}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Title from './Title';\r\nimport Board from './Board';\r\n\r\nfunction Main() {\r\n  const SFXs = {\r\n    player1PutSFX: document.querySelector('#player1PutSFX'),\r\n    player2PutSFX: document.querySelector('#player2PutSFX'),\r\n    resetSFX: document.querySelector('#resetSFX'),\r\n    undoSFX: document.querySelector('#undoSFX'),\r\n    resultSFX: document.querySelector('#resultSFX')\r\n  };\r\n\r\n  return (\r\n    <main className=\"Main\">\r\n      <Title title=\"React Gomoku\" />\r\n      <Board\r\n        player1PutSFX={SFXs.player1PutSFX as HTMLAudioElement}\r\n        player2PutSFX={SFXs.player2PutSFX as HTMLAudioElement}\r\n        resetSFX={SFXs.resetSFX as HTMLAudioElement}\r\n        undoSFX={SFXs.undoSFX as HTMLAudioElement}\r\n        resultSFX={SFXs.resultSFX as HTMLAudioElement}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}