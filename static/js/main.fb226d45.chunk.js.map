{"version":3,"sources":["components/Title.tsx","components/BoardButton.tsx","components/Bottom.tsx","components/Board.tsx","components/ModeChanger.tsx","components/ReplayBottom.tsx","components/Replay.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","props","className","title","classNames","BoardButton","keyPos","split","map","item","parseInt","row","col","finalClassName","winningTracked","tracked","who","id","disabled","clicked","winnerExists","theme","Bottom","info","onClick","onClickUndo","onClickReset","onClickSaveReplay","HEIGHT","Board","useState","tiles","Array","from","length","curPlayer","history","winner","winningTracks","status","setStatus","stopSFX","wav","pause","currentTime","playSFX","player1PutSFX","player2PutSFX","undoSFX","resetSFX","resultSFX","play","isInRange","WIDTH","getNewTiles","player","newTiles","_","i","getNewPlayer","checkWinner","directions","n","rDir","cDir","collected","curRow","curCol","push","winningTrack","Set","event","target","Number","isNaN","newPlayer","newHistory","putStone","line","j","has","themeButtons","tmp","pop","undefined","replayData","width","height","file","document","createElement","fileBlob","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","ModeCahnger","onChange","onChangeMode","value","name","defaultChecked","ReplayBottom","onClickPrev","curTrack","maxTrack","onClickNext","ReplayBoard","currentTrack","accept","files","reader","FileReader","addEventListener","result","parse","readAsText","loadReplay","newTrack","SFXs","querySelector","THEME_BUTTONS","THEME_TITLES","THEME_INDEX","dat","Date","day","getDate","month","getMonth","Main","mode","ModeChanger","Replay","renderBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb226d45.chunk.js","sourcesContent":["import React from 'react';\n\ninterface TitleProps {\n  title: string\n}\n\nfunction Title(props: TitleProps) {\n  return (\n    <div className=\"Title\">\n      { props.title }\n    </div>\n  );\n}\n\nexport default Title;\n","import React from 'react';\n\ninterface BoardButtonProps {\n  keyPos: string,\n  who: number,\n  clicked: boolean,\n  winnerExists: boolean,\n  tracked: boolean,\n  theme: string[]\n}\n\nconst classNames: string[][] = [\n  ['LeftTopCorner', 'TopEdge', 'RightTopCorner'],\n  ['LeftEdge', 'InBoard', 'RightEdge'],\n  ['LeftBottomCorner', 'BottomEdge', 'RightBottomCorner']\n];\n\nfunction BoardButton(props: BoardButtonProps) {\n  const [row, col] = props.keyPos.split(',').map((item) => parseInt(item));\n  const rPos = (row === 0) ? 0 : ((row === 18) ? 2 : 1);\n  const cPos = (col === 0) ? 0 : ((col === 18) ? 2 : 1);\n  const finalClassName = classNames[rPos][cPos];\n\n  const winningTracked = props.tracked ? 'TrackedResult' : '';\n\n  return (\n    <button\n      className={`BoardButton Player${props.who} ${finalClassName} ${winningTracked}`}\n      key={props.keyPos}\n      id={props.keyPos}\n      disabled={props.clicked || props.winnerExists}\n    >\n      { props.who !== 0 ? (props.theme[props.who - 1]) : '🔴' }\n    </button>\n  );\n}\n\nexport default BoardButton;\n","import React from 'react';\n\ninterface BottomProps {\n  info?: string,\n  onClickUndo: Function,\n  onClickReset: Function,\n  onClickSaveReplay: Function\n}\n\nfunction Bottom(props: BottomProps) {\n  return (\n    <div className=\"Bottom\">\n      {\n        (props.info && props.info !== '') ?\n        <div> { props.info } </div> :\n        ''\n      }\n      <button onClick={() => {props.onClickUndo()}}>\n        Undo\n      </button>\n      <button onClick={() => {props.onClickReset()}}>\n        Reset\n      </button>\n      <button onClick={() => {props.onClickSaveReplay()}}>\n        Save As Replay\n      </button>\n    </div>\n  );\n}\n\nexport default Bottom;\n","import React, { useState } from 'react';\nimport BoardButton from './BoardButton';\nimport Bottom from './Bottom';\n\ninterface BoardProps {\n  player1PutSFX: HTMLAudioElement,\n  player2PutSFX: HTMLAudioElement,\n  undoSFX: HTMLAudioElement,\n  resetSFX: HTMLAudioElement,\n  resultSFX: HTMLAudioElement,\n  themeButtons: string[]\n}\n\nconst EMPTY: number = 0;\nconst WIDTH: number = 19;\nconst HEIGHT: number = 19;\nconst OBJECTIVE: number = 5;\nconst COL_BOUNDARY: number = WIDTH - 1;\nconst ROW_BOUNDARY: number = HEIGHT - 1;\n\nfunction Board(props: BoardProps) {\n  // Using React hooks\n  const [status, setStatus] = useState({\n    tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\n    curPlayer: 1,\n    history: Array<number[]>(),\n    winner: 0,\n    winningTracks: Array<number[]>()\n  });\n\n  const stopSFX = (wav: HTMLAudioElement) => {\n    if (wav) {\n      wav.pause();\n      wav.currentTime = 0;\n    }\n  };\n\n  const initSFX = () => {\n    stopSFX(props.player1PutSFX);\n    stopSFX(props.player2PutSFX);\n    stopSFX(props.undoSFX);\n    stopSFX(props.resetSFX);\n    stopSFX(props.resultSFX);\n  };\n\n  const playSFX = (wav: HTMLAudioElement) => {\n    initSFX();\n    if (wav) {\n      wav.play();\n    }\n  };\n\n  const isInRange = (row: number, col: number): boolean => {\n    if (row < 0 || row > ROW_BOUNDARY || col < 0 || col > COL_BOUNDARY) {\n      return false;\n    }\n    return true;\n  };\n\n  const getNewTiles = (row: number, col: number, player: number): number[][] => {\n    const newTiles = Array.from({length: HEIGHT}, (_, i) => Array.from(status.tiles[i]));\n    newTiles[row][col] = player;\n    return newTiles;\n  };\n\n  const getNewPlayer = (curPlayer: number): number => {\n    switch (curPlayer) {\n      case 1:\n        return 2;\n      case 2:\n        return 1;\n      default:\n        return 0;\n    }\n  };\n\n  const putStone = (row: number, col: number) => {\n    if (status.tiles[row][col] !== 0) {\n      return;\n    }\n\n    const newTiles: number[][] = getNewTiles(row, col, status.curPlayer);\n    const newPlayer: number = getNewPlayer(status.curPlayer);\n\n    const [winner, winningTracks] = checkWinner(row, col, newTiles);\n\n    const newHistory = Array.from(status.history);\n    newHistory.push([row, col]);\n\n    if (winner !== 0) {\n      playSFX(props.resultSFX);\n    } else {\n      switch (status.curPlayer) {\n        case 1:\n          playSFX(props.player1PutSFX);\n          break;\n        case 2:\n          playSFX(props.player2PutSFX);\n          break;\n      }\n    }\n\n    setStatus({\n      tiles: newTiles,\n      curPlayer: newPlayer,\n      history: newHistory,\n      winner: winner,\n      winningTracks: winningTracks\n    });\n  };\n\n  const undo = () => {\n    if (status.history.length === 0) {\n      return;\n    }\n\n    playSFX(props.undoSFX);\n\n    const newHistory = Array.from(status.history);\n    const tmp: number[] | undefined = newHistory.pop();\n\n    if (tmp === undefined) {\n      return;\n    }\n\n    const [row, col] = tmp;\n    if (!isInRange(row, col)) {\n      return;\n    }\n\n    const newTiles: number[][] = getNewTiles(row, col, EMPTY);\n    const newPlayer: number = getNewPlayer(status.curPlayer);\n\n    setStatus({\n      tiles: newTiles,\n      curPlayer: newPlayer,\n      history: newHistory,\n      winner: 0,\n      winningTracks: Array<number[]>()\n    });\n  };\n\n  const resetBoard = () => {\n    playSFX(props.resetSFX);\n\n    setStatus({\n      tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\n      curPlayer: 1,\n      history: Array<number[]>(),\n      winner: 0,\n      winningTracks: Array<number[]>()\n    });\n  };\n\n  const checkWinner = (row: number, col: number, newTiles: number[][]): [number, number[][]] => {\n    const winner: number = newTiles[row][col];\n\n    const directions: number[][] = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    for (let n: number = 0; n < directions.length; n++) {\n      const [rDir, cDir] = directions[n];\n      const collected: number[][] = [[row, col]];\n\n      let [curRow, curCol] = [row + rDir, col + cDir];\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\n        collected.push([curRow, curCol]);\n        curRow += rDir;\n        curCol += cDir;\n      }\n\n      [curRow, curCol] = [row - rDir, col - cDir];\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\n        collected.push([curRow, curCol]);\n        curRow -= rDir;\n        curCol -= cDir;\n      }\n\n      if (collected.length === OBJECTIVE) {\n        return [winner, collected];\n      }\n    }\n\n    return [0, []];\n  };\n\n  const saveReplay = () => {\n    const replayData = {\n      width: WIDTH,\n      height: HEIGHT,\n      history: status.history\n    };\n\n    const file: HTMLAnchorElement = document.createElement('a');\n    const fileBlob: Blob = new Blob([JSON.stringify(replayData)], {type: 'json'});\n    file.href = URL.createObjectURL(fileBlob);\n    file.download = 'replay.json';\n    file.click();\n  };\n\n  const winningTrack: Set<string> = new Set(status.winningTracks.map((item) => `${item[0]},${item[1]}`));\n\n  return (\n    <div className=\"Board\" onClick={(event) => {\n      const [row, col] = (event.target as HTMLElement).id.split(',').map((item) => parseInt(item));\n      if (Number.isNaN(row) || Number.isNaN(col)) {\n        return;\n      }\n\n      putStone(row, col);\n    }}>\n      <div className=\"Tiles\">\n        {\n          status.tiles.map((line, i) => {\n            return line.map((item, j) => {\n              return (<BoardButton\n                key={`r${i}c${j}`}\n                keyPos={`${i},${j}`}\n                who={item}\n                clicked={item !== 0}\n                winnerExists={status.winner !== 0}\n                tracked={status.winner !== 0 ? (winningTrack.has(`${i},${j}`)) : false}\n                theme={props.themeButtons}\n              />);\n            });\n          })\n        }\n      </div>\n      <Bottom\n        info={\n          status.winner !== 0 \n          ? `Player ${status.winner} wins!`\n          : (status.history.length === HEIGHT * WIDTH\n            ? 'Draw!'\n            : `Player ${status.curPlayer}'s turn!`)\n        }\n        onClickUndo={undo}\n        onClickReset={resetBoard}\n        onClickSaveReplay={saveReplay}\n      />\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\ninterface ModeChangerProps {\n  onChangeMode: Function\n}\n\nfunction ModeCahnger(props: ModeChangerProps) {\n  return (\n    <div className=\"ModeChanger\" onChange={(event) => {\n      props.onChangeMode((event.target as HTMLInputElement).value);\n    }}>\n      <input type=\"radio\" id=\"game\" name=\"mode\" value=\"game\" defaultChecked />\n      <label>Game Mode</label>\n      <input type=\"radio\" id=\"replay\" name=\"mode\" value=\"replay\" />\n      <label>Replay</label>\n    </div>\n  );\n}\n\nexport default ModeCahnger;\n","import React from 'react';\n\ninterface ReplayBottomProps {\n  curTrack: number,\n  maxTrack: number,\n  onClickPrev: Function,\n  onClickNext: Function\n}\n\nfunction ReplayBottom(props: ReplayBottomProps) {\n  return (\n    <div className=\"Bottom\">\n      <button onClick={() => {props.onClickPrev()}}>\n        Prev\n      </button>\n      {\n        `${props.curTrack} / ${props.maxTrack}`\n      }\n      <button onClick={() => {props.onClickNext()}}>\n        Next\n      </button>\n    </div>\n  );\n}\n\nexport default ReplayBottom;\n","import React, { useState } from 'react';\nimport BoardButton from './BoardButton';\nimport ReplayBottom from './ReplayBottom';\n\ninterface ReplayBoardProps {\n  player1PutSFX: HTMLAudioElement,\n  player2PutSFX: HTMLAudioElement,\n  undoSFX: HTMLAudioElement,\n  resetSFX: HTMLAudioElement,\n  resultSFX: HTMLAudioElement,\n  themeButtons: string[]\n}\n\nconst EMPTY: number = 0;\nconst WIDTH: number = 19;\nconst HEIGHT: number = 19;\nconst OBJECTIVE: number = 5;\nconst COL_BOUNDARY: number = WIDTH - 1;\nconst ROW_BOUNDARY: number = HEIGHT - 1;\n\nfunction ReplayBoard(props: ReplayBoardProps) {\n  // Using React hooks\n  const [status, setStatus] = useState({\n    tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\n    curPlayer: 1,\n    currentTrack: 0,\n    winner: 0,\n    winningTracks: Array<number[]>(),\n    history: Array<number[]>()\n  });\n\n  const stopSFX = (wav: HTMLAudioElement) => {\n    if (wav) {\n      wav.pause();\n      wav.currentTime = 0;\n    }\n  };\n\n  const initSFX = () => {\n    stopSFX(props.player1PutSFX);\n    stopSFX(props.player2PutSFX);\n    stopSFX(props.undoSFX);\n    stopSFX(props.resetSFX);\n    stopSFX(props.resultSFX);\n  };\n\n  const playSFX = (wav: HTMLAudioElement) => {\n    initSFX();\n    if (wav) {\n      wav.play();\n    }\n  };\n\n  const isInRange = (row: number, col: number): boolean => {\n    if (row < 0 || row > ROW_BOUNDARY || col < 0 || col > COL_BOUNDARY) {\n      return false;\n    }\n    return true;\n  };\n\n  const getNewTiles = (row: number, col: number, player: number): number[][] => {\n    const newTiles = Array.from({length: HEIGHT}, (_, i) => Array.from(status.tiles[i]));\n    newTiles[row][col] = player;\n    return newTiles;\n  };\n\n  const getNewPlayer = (curPlayer: number): number => {\n    switch (curPlayer) {\n      case 1:\n        return 2;\n      case 2:\n        return 1;\n      default:\n        return 0;\n    }\n  };\n\n  const next = () => {\n    if (status.currentTrack >= status.history.length) {\n      return;\n    }\n\n    const [row, col] = status.history[status.currentTrack];\n    if (!isInRange(row, col)) {\n      return;\n    }\n\n    const newTiles: number[][] = getNewTiles(row, col, status.curPlayer);\n    const newPlayer: number = getNewPlayer(status.curPlayer);\n\n    const [winner, winningTracks] = checkWinner(row, col, newTiles);\n\n    if (winner !== 0) {\n      playSFX(props.resultSFX);\n    } else {\n      switch (status.curPlayer) {\n        case 1:\n          playSFX(props.player1PutSFX);\n          break;\n        case 2:\n          playSFX(props.player2PutSFX);\n          break;\n      }\n    }\n\n    const newTrack = status.currentTrack + 1;\n\n    setStatus({\n      tiles: newTiles,\n      curPlayer: newPlayer,\n      currentTrack: newTrack,\n      winner: winner,\n      winningTracks: winningTracks,\n      history: status.history\n    });\n  };\n\n  const prev = () => {\n    if (status.currentTrack <= 0) {\n      return;\n    }\n\n    playSFX(props.undoSFX);\n\n    const newTrack = status.currentTrack - 1;\n    const [row, col] = status.history[newTrack];\n    if (!isInRange(row, col)) {\n      return;\n    }\n\n    const newTiles: number[][] = getNewTiles(row, col, EMPTY);\n    const newPlayer: number = getNewPlayer(status.curPlayer);\n\n    setStatus({\n      tiles: newTiles,\n      curPlayer: newPlayer,\n      currentTrack: newTrack,\n      winner: 0,\n      winningTracks: Array<number[]>(),\n      history: status.history\n    });\n  };\n\n  const checkWinner = (row: number, col: number, newTiles: number[][]): [number, number[][]] => {\n    const winner: number = newTiles[row][col];\n\n    const directions: number[][] = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    for (let n: number = 0; n < directions.length; n++) {\n      const [rDir, cDir] = directions[n];\n      const collected: number[][] = [[row, col]];\n\n      let [curRow, curCol] = [row + rDir, col + cDir];\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\n        collected.push([curRow, curCol]);\n        curRow += rDir;\n        curCol += cDir;\n      }\n\n      [curRow, curCol] = [row - rDir, col - cDir];\n      while (isInRange(curRow, curCol) && newTiles[curRow][curCol] === winner) {\n        collected.push([curRow, curCol]);\n        curRow -= rDir;\n        curCol -= cDir;\n      }\n\n      if (collected.length === OBJECTIVE) {\n        return [winner, collected];\n      }\n    }\n\n    return [0, []];\n  };\n\n  const loadReplay = (files: FileList) => {\n    if (files.length <= 0) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      const result = JSON.parse(reader.result as string);\n\n      if (result.width !== WIDTH || result.height !== HEIGHT) {\n        return;\n      }\n\n      if (result.history === null || result.history === undefined) {\n        return;\n      }\n\n      setStatus({\n        tiles: Array.from({length: HEIGHT}, () => Array.from({length: WIDTH}, () => 0)),\n        curPlayer: 1,\n        currentTrack: 0,\n        winner: 0,\n        winningTracks: Array<number[]>(),\n        history: result.history\n      });\n    });\n\n    reader.readAsText(files[0]);\n  };\n\n  const winningTrack: Set<string> = new Set(status.winningTracks.map((item) => `${item[0]},${item[1]}`));\n\n  return (\n    <div className=\"Board\">\n      <div className=\"Tiles\">\n        {\n          status.tiles.map((line, i) => {\n            return line.map((item, j) => {\n              return (<BoardButton\n                key={`r${i}c${j}`}\n                keyPos={`${i},${j}`}\n                who={item}\n                clicked={true}\n                winnerExists={status.winner !== 0}\n                tracked={status.winner !== 0 ? (winningTrack.has(`${i},${j}`)) : false}\n                theme={props.themeButtons}\n              />);\n            });\n          })\n        }\n      </div>\n      <label>Replay File: </label>\n      <input\n        type=\"file\"\n        accept=\"application/json\"\n        onChange={(event) => {\n          if ((event.target as HTMLInputElement).files) {\n            loadReplay((event.target as HTMLInputElement).files as FileList);\n          }\n        }\n      }/>\n      <ReplayBottom\n        curTrack={status.currentTrack}\n        maxTrack={status.history.length}\n        onClickPrev={prev}\n        onClickNext={next}\n      />\n    </div>\n  );\n}\n\nexport default ReplayBoard;\n","import React, { useState } from 'react';\nimport Title from './Title';\nimport Board from './Board';\nimport ModeChanger from './ModeChanger';\nimport ReplayBoard from './Replay';\n\nconst SFXs = {\n  player1PutSFX: document.querySelector('#player1PutSFX'),\n  player2PutSFX: document.querySelector('#player2PutSFX'),\n  resetSFX: document.querySelector('#resetSFX'),\n  undoSFX: document.querySelector('#undoSFX'),\n  resultSFX: document.querySelector('#resultSFX')\n};\n\nconst THEME_BUTTONS = {\n  'default': ['⚫', '⚪'],\n  'halloween': ['🟤', '🟠'],\n  'winter': ['🔴', '🟢']\n};\n\nconst THEME_TITLES = {\n  'default': 'React Gomoku',\n  'halloween': 'Halloween Gomoku',\n  'winter': 'Holiday Gomoku'\n};\n\nconst THEME_INDEX = (() => {\n  const dat: Date = new Date();\n\n  const day: number = dat.getDate();\n  const month: number = dat.getMonth();\n\n  if (month === 9 && day === 31) {\n    // October 31\n    return 'halloween';\n  } else if ((month === 0 && day === 1) || (month === 11 && day === 25)) {\n    // January 1 or December 25\n    return 'winter';\n  }\n\n  return 'default';\n})();\n\nfunction Main() {\n  const [status, setStatus] = useState({\n    mode: 'game'\n  });\n\n  const onChangeMode = (mode: string) => {\n    if (mode === status.mode) {\n      return;\n    }\n\n    setStatus({\n      mode: mode\n    });\n  };\n\n  const renderBoard = () => {\n    switch (status.mode) {\n      case 'game':\n        return (\n          <Board\n            player1PutSFX={SFXs.player1PutSFX as HTMLAudioElement}\n            player2PutSFX={SFXs.player2PutSFX as HTMLAudioElement}\n            resetSFX={SFXs.resetSFX as HTMLAudioElement}\n            undoSFX={SFXs.undoSFX as HTMLAudioElement}\n            resultSFX={SFXs.resultSFX as HTMLAudioElement}\n            themeButtons={THEME_BUTTONS[THEME_INDEX]}\n          />\n        );\n      case 'replay':\n        return (\n          <ReplayBoard\n            player1PutSFX={SFXs.player1PutSFX as HTMLAudioElement}\n            player2PutSFX={SFXs.player2PutSFX as HTMLAudioElement}\n            resetSFX={SFXs.resetSFX as HTMLAudioElement}\n            undoSFX={SFXs.undoSFX as HTMLAudioElement}\n            resultSFX={SFXs.resultSFX as HTMLAudioElement}\n            themeButtons={THEME_BUTTONS[THEME_INDEX]}\n          />\n        );\n    }\n  };\n\n  return (\n    <main className=\"Main\">\n      <Title title={THEME_TITLES[THEME_INDEX]} />\n      <ModeChanger\n        onChangeMode={onChangeMode}\n      />\n      {\n        renderBoard()\n      }\n    </main>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}